import React, { useState, useEffect } from "react";
import MovieBox from "./MovieBox";
import MovieDetails from "./MovieDetails";

function App() {
  const [searchType, setSearchType] = useState("movie");
  const [searchQuery, setSearchQuery] = useState("");
  const [movies, setMovies] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    fetchMovies(searchType, searchQuery, currentPage);
  }, [searchType, searchQuery, currentPage]);

  const fetchMovies = async (type, query, page) => {
    try {
      let endpoint = "";
      switch (type) {
        case "movie":
          endpoint = "search/movie";
          break;
        case "tv":
          endpoint = "search/tv";
          break;
        case "person":
          endpoint = "search/person";
          break;
        case "keyword":
          endpoint = "search/keyword";
          break;
        case "multi":
          endpoint = "search/multi";
          break;
        default:
          endpoint = "search/movie";
          break;
      }

      const response = await fetch(
        `https://api.themoviedb.org/3/${endpoint}?api_key=b8f33277c38d4286ab9e30134ebf037e&query=${query}&page=${page}`
      );
      const data = await response.json();
      setMovies(data.results);
      setTotalPages(data.total_pages);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setCurrentPage(1); // Reset current page when performing a new search
    fetchMovies(searchType, searchQuery, 1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage((prevPage) => prevPage - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  // Calculate the starting and ending index of the movies to display on the current page
  const startIndex = (currentPage - 1) * 10;
  const endIndex = startIndex + 10;
  const displayedMovies = movies.slice(startIndex, endIndex);

  return (
    <div>
      <h1>TMDB Movie Search</h1>
      <form onSubmit={handleSearch}>
        <select
          value={searchType}
          onChange={(e) => setSearchType(e.target.value)}
        >
          <option value="movie">Movie</option>
          <option value="tv">TV Show</option>
          <option value="person">Person</option>
          <option value="keyword">Keyword</option>
          <option value="multi">Multi</option>
        </select>
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder={`Enter a ${searchType}`}
        />
        <button type="submit">Search</button>
      </form>
      <div>
        <h2>Search Results:</h2>
        {displayedMovies.length === 0 ? (
          <p>No results found.</p>
        ) : (
          <ul style={{ listStyle: "none", padding: 0 }}>
            {displayedMovies.map((movie) => (
              <li key={movie.id}>
                <MovieBox movie={movie} />
              </li>
            ))}
          </ul>
        )}
      </div>
      <div>
        <button onClick={handlePrevPage} disabled={currentPage === 1}>
          Previous Page
        </button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <button onClick={handleNextPage} disabled={currentPage === totalPages}>
          Next Page
        </button>
      </div>
    </div>
  );
}

export default App;
